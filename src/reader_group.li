// Copyright (c) 2009 Mildred Ki'Lya <http://ki.lya.online.fr>
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following
// conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.

Section Header

  + name := READER_GROUP;

  - author        := "Mildred Ki'Lya <http://ki.lya.online.fr>";
  - copyright     := "2009 Mildred Ki'Lya";
  - comment       := "";

Section Inherit

  + parent :Expanded READER;

Section Public

  - read_token stack:STACK :TOKEN <-
  (
    (index <= group.tokens.upper).if {
      last_token := group.tokens.item index;
      index := index + 1;
    } else {
      last_token := NULL;
    };

    last_token
  );

  + group :TK_GROUP;

  + index :INTEGER;

  + last_token :TOKEN;

  - make_group grp:TK_GROUP :SELF <-
  [
    -? { grp != NULL };
  ]
  (
    group := grp;
    index := grp.tokens.lower;
    Self
  );

  - process_group stack:STACK <-
  (
    read_token stack;
    (last_token != NULL).if {
      process_token last_token stack stack;
      process_group stack;
    };
  );

Section SELF

  - make_from origin:SELF <-
  (
    (origin.group = NULL).if_false {
      make_group (origin.group);
    };
    last_token := origin.last_token;
    index      := origin.index;
  );
