// Copyright (c) 2009 Mildred Ki'Lya <http://ki.lya.online.fr>
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following
// conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.

Section Header

  + name := TK_GROUP;

  - author        := "Mildred Ki'Lya <http://ki.lya.online.fr>";
  - copyright     := "2009 Mildred Ki'Lya";
  - comment       := "";

Section Inherit

  + parent_token :Expanded TOKEN := TOKEN;

Section Private

  - dico_characters :HASHED_DICTIONARY(STRING,CHARACTER) :=
    HASHED_DICTIONARY(STRING,CHARACTER).create;

Section Public

  - type :STRING_CONSTANT := "TK_GROUP";

  + start_character :CHARACTER;
  + stop_character  :CHARACTER;

  + tokens :FAST_ARRAY(TOKEN) :=
    FAST_ARRAY(TOKEN).create 0;

  - source :ABSTRACT_STRING <-
  ( + str:STRING;
    str := STRING.create (tokens.count+2);
    str.add_last start_character;
    tokens.foreach { tk:TOKEN;
      str.append (tk.source);
    };
    str.add_last stop_character;
    str
  );

  - output :ABSTRACT_STRING <-
  ( + str:STRING;
    str := STRING.create (tokens.count+2);
    tokens.foreach { tk:TOKEN;
      str.append (tk.output);
    };
    str
  );

  - make (start, stop :CHARACTER) :SELF <-
  (
    start_character := start;
    stop_character  := stop;
    Self
  );

  - install_in stack_frame:STACK_FRAME <-
  ( + tk_end_group :TK_END_GROUP;
    stack_frame.set_output_behaviour { tk:TOKEN;
      tk_end_group ?= tk;
      (tk_end_group != NULL).if {
	stop_character := tk_end_group.character;
      } else {
	tokens.add_last tk;
      };
    };
  );

Section SELF

  - make_from origin:SELF <-
  (
    tokens := origin.tokens.clone;
    start_character := origin.start_character;
    stop_character  := origin.stop_character;
  );

