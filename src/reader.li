// Copyright (c) 2009 Mildred Ki'Lya <http://ki.lya.online.fr>
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following
// conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.

Section Header

  + name := READER;

  - author        := "Mildred Ki'Lya <http://ki.lya.online.fr>";
  - copyright     := "2009 Mildred Ki'Lya";
  - comment       := "";

Section Inherit

  + parent_clonable :Expanded CLONABLE;

Section Public

  + parent :READER;

  - make_parent p:READER :SELF <-
  (
    parent := p;
    Self
  );

  - read_token stack:STACK :TOKEN <- (deferred; TOKEN);

  - last_token :TOKEN <- (deferred; TOKEN);

  - process_token token:TOKEN writer writer:WRITER_STACK stack stack:STACK <-
  ( + tk_idf:TK_IDENTIFIER;
    + tk_grp:TK_GROUP;
    + rd_grp:READER_GROUP;

    ((tk_idf ?= token) != NULL).if {
      + macro:MACRO;
      //
      // Read identifier (execute macro)
      //
      macro := stack.current.definitions.reference_at (tk_idf.name);
      (macro != NULL).if {
        macro.execute_reader Self writer writer stack stack;
      } else {
        writer.output token;
      }
    }.elseif {(tk_grp ?= token) != NULL} then {
      //
      // Read group (execute all elements)
      //
      rd_grp := READER_GROUP.clone.make_group tk_grp.make_parent Self;
      stack.push_copy;
      rd_grp.process_group stack writer writer;
      stack.pop;
    } else {
      //
      // Read any other token and output it directly
      //
      writer.output token;
    };
  );

