// Copyright (c) 2009 Mildred Ki'Lya <http://ki.lya.online.fr>
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following
// conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.

Section Header

  + name := READER;

  - author        := "Mildred Ki'Lya <http://ki.lya.online.fr>";
  - copyright     := "2009 Mildred Ki'Lya";
  - comment       := "";

Section Inherit

  + parent_inherit_writer :Expanded WRITER;

Section SELF

  - raw_read_token stack:STACK :TOKEN <- (deferred; TOKEN);

Section Private

  + push_back :LINKED_LIST(TOKEN) := LINKED_LIST(TOKEN).create;

Section Public

  + parent_reader :READER;

  - make_parent_reader p:READER :SELF <-
  (
    parent_reader := p;
    Self
  );

  - item_reader i:INTEGER :READER <-
  [
    -? { i >= 0 };
  ]
  ( + result :READER;
    (i = 0).if {
      result := Self;
    }.elseif {parent_reader != NULL} then {
      result := parent_reader.item_reader (i-1);
    };
    result
  );

  - write_token token:TOKEN <-
  (
    push_back.add_last token;
  );

  - read_token stack:STACK :TOKEN <-
  [
    -? { stack.current.reader = Self };
  ]
  (
    push_back.is_empty.if_false {
      last_token := push_back.first;
      push_back.remove_first;
    } else {
      last_token := raw_read_token stack;
    };
    last_token
  );

  - cache_count :INTEGER <- push_back.count;

  + last_token :TOKEN;

  - read_processed_token stack:STACK :TOKEN <-
  [
    -? { stack.current.reader = Self };
  ]
  ( + old_cache_count :INTEGER;
    + result :TOKEN;
    + writer :WRITER_STACK;

    read_token stack;
    old_cache_count := cache_count;
    writer := WRITER_STACK.clone.make_writer Self;
    process_token last_token writer writer stack stack;
    (cache_count > old_cache_count).if {
      result := read_token stack;
    };
    result
  );

  - process_token token:TOKEN writer writer:WRITER_STACK stack stack:STACK <-
  [
    -? { stack.current.reader = Self };
  ]
  ( + tk_idf:TK_IDENTIFIER;
    + tk_grp:TK_GROUP;
    + rd_grp:READER_GROUP;

    ((tk_idf ?= token) != NULL).if {
      + macro:MACRO;
      //
      // Read identifier (execute macro)
      //
      macro := stack.current.definitions.reference_at (tk_idf.name);
      (macro != NULL).if {
        macro.execute_reader Self writer writer stack stack;
      } else {
        writer.write_token token;
      }
    }.elseif {(tk_grp ?= token) != NULL} then {
      //
      // Read group (execute all elements)
      //
      rd_grp := READER_GROUP.clone.make_parent_reader Self
                                  .make_group tk_grp;
      stack.push_copy;
      stack.current.set_reader rd_grp;
      rd_grp.process_group stack writer writer;
      stack.pop;
    } else {
      //
      // Read any other token and output it directly
      //
      writer.write_token token;
    };
  );

Section CLONABLE

  - make_from origin:SELF <-
  (
    parent_inherit_writer.make_from origin;
    parent_reader := origin.parent_reader;
    last_token    := origin.last_token;
    push_back     := LINKED_LIST(TOKEN).create;
    origin.push_back.foreach { tk:TOKEN;
      push_back.add_last tk;
    };
  );


