// Copyright (c) 2009 Mildred Ki'Lya <http://ki.lya.online.fr>
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following
// conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.

Section Header

  + name := T5;

  - author        := "Mildred Ki'Lya <http://ki.lya.online.fr>";
  - copyright     := "2009 Mildred Ki'Lya";
  - comment       := "";

Section Inherit

  + parent :Expanded OBJECT;

Section Public

  - main <-
  ( //+ state :STATE;
    + reader:READER;
    + writer:WRITER;
    + stack :STACK;

    + c:CLONABLE;
    c := CLONABLE;
    `/* @c */`;
    // Force generation of CLONABLE_struct that is an alias of STACK_FRAME. If
    // We don't have it, the C code generated is incorrect

    stack := STACK.clone;
    reader := READER_STREAM.clone.make_input STD_INPUT;
    writer := WRITER_STREAM.clone.make_stream STD_OUTPUT;

    stack.current.set_reader reader;
    stack.current.definitions.put MC_IF to "if";
    stack.current.definitions.put MC_DEF to "def";
    stack.current.definitions.put MC_NOP to "nop";
    stack.current.definitions.put MC_SET to "set";
    stack.current.definitions.put MC_INPUT to "input";
    stack.current.definitions.put MC_BUFFER to "buffer";
    stack.current.definitions.put MC_BACKSLASH to "\\";
    stack.current.definitions.put MC_READ_TOKEN to "readToken";

    reader.process_all stack writer (WRITER_STACK.clone.make_writer writer);

    //state := STATE.clone.make_reader reader writer writer stack stack;
    //state.process;
  );


// kate: hl Lisaac v0.2; indent-width 2; space-indent on; replace-tabs off;
// kate: tab-width 8; remove-trailing-space on;
