// Copyright (c) 2009 Mildred Ki'Lya <http://ki.lya.online.fr>
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following
// conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.

Section Header

  + name := MC_INPUT;

  // Usage: \input{filename}
  //
  // Process tokens from file `filename'

  - author        := "Mildred Ki'Lya <http://ki.lya.online.fr>";
  - copyright     := "2009 Mildred Ki'Lya";
  - comment       := "";

Section Inherit

  + parent :Expanded MACRO;

Section Public

  - execute_reader reader:READER writer writer:WRITER_STACK stack stack:STACK <-
  ( + tk :TOKEN;
    + fn :ABSTRACT_STRING;
    + rd :READER;
    + file :STD_FILE;
    + ok :BOOLEAN;

    tk := reader.read_processed_token stack;
    fn := tk.output;

    file ?= FILE_SYSTEM.get_entry fn;
    (file != NULL).if {
      ok := file.open_read_only;
    };
    ok.if {
      rd := READER_STREAM.clone.make_input (FILE_INPUT_STREAM.create file);
      stack.push_copy;
      stack.current.set_reader rd;
      rd.process_all stack writer writer;
      stack.pop;
    } else {
      writer.write_token (
        + tk_grp :TK_GROUP;
        + error :STRING;
        tk_grp := TK_GROUP.clone.make_group (stack.current.char_begin_group,
                                             stack.current.char_end_group);
        error := "File `"+fn+"' not readable";
        error.lower.to (error.upper) do { i:INTEGER;
          tk_grp.write_token (TK_CHARACTER.clone.make (error.item i));
        };
        tk_grp
      );
    };
  )
  [
    +? { stack.current = Old stack.current };
  ];

