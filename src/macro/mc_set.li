// Copyright (c) 2009 Mildred Ki'Lya <http://ki.lya.online.fr>
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following
// conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.

Section Header

  + name := MC_SET;

  // Usage: \set\idf\evaluatedContent
  //        \set{level}\idf\evaluatedContent
  //
  // If \idf is an identifier, \evaluatedContent is evaluated. If it results in
  // no tokens, the macro \idf is unset, else the macro \idf is defined as a
  // varaible containing the first result.
  //
  // Otherwise (\idf not an identifier), \def is outputted, \idf is processed
  // and \evaluatedContent isn't even read
  //
  // If level is specified (defautl level 0), the definition happens at the
  // stack level specified

  - author        := "Mildred Ki'Lya <http://ki.lya.online.fr>";
  - copyright     := "2009 Mildred Ki'Lya";
  - comment       := "";

Section Inherit

  + parent :Expanded MACRO;

Section Public

  - execute_reader reader:READER writer writer:WRITER_STACK stack stack:STACK <-
  ( + idf, content :TOKEN;
    + idf2 :TK_IDENTIFIER;
    + mc :MACRO_VARIABLE;
    + out :ABSTRACT_STRING;
    + level :INTEGER;

    idf2 ?= idf := reader.read_token stack;

    (idf2 = NULL).if {
      out := idf.output;
      out.is_integer.if {
        level := out.to_integer;
        idf2 ?= idf := reader.read_token stack;
      };
    };

    (idf2 != NULL).if {

      content := reader.read_processed_token stack;
      (content = NULL).if {
        stack.current.definitions.remove (idf2.name);
        1.to level do { i:INTEGER;
          (stack.item i != NULL).if {
            stack.item i.definitions.remove (idf2.name);
          };
        };
      } else {
        mc := MACRO_VARIABLE.clone.make_token content;
        stack.current.definitions.put mc to (idf2.name);
        1.to level do { i:INTEGER;
          (stack.item i != NULL).if {
            stack.item i.definitions.put mc to (idf2.name);
          };
        };
      };

    } else {

      reader.process_token idf writer writer stack stack;

    };
  );

