// Copyright (c) 2009 Mildred Ki'Lya <http://ki.lya.online.fr>
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following
// conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.

Section Header

  + name := MC_READ_TOKEN;

  // Usage: \readToken{depth}
  //
  // Returns the next token at evaluated depth {depth}. Default depth is 1.
  //
  // Depth 0 read the next token just after \readToken was invoked
  // Depth 1 read the next token after the macro that called \readToken
  // ...

  - author        := "Mildred Ki'Lya <http://ki.lya.online.fr>";
  - copyright     := "2009 Mildred Ki'Lya";
  - comment       := "";

Section Inherit

  + parent :Expanded MACRO;

Section Public

  - execute_reader reader:READER writer writer:WRITER_STACK stack stack:STACK <-
  ( + rd:READER;
    + tk_out :ABSTRACT_STRING;
    + depth:INTEGER;
    + tk:TOKEN;
    + st:STACK;

    tk := reader.read_processed_token stack;
    tk_out := tk.output;
    tk_out.is_integer.if {
      depth := tk_out.to_integer;
    } else {
      depth := 1;
      reader.write_token tk;
    };

    rd := reader.item_reader depth;

    // TODO: check this
    st := stack.clone;
    {(st.current != NULL) && {st.current.reader != rd}}.while_do {
      st.pop;
    };
    ? { st.current != NULL };

    writer.write_token (rd.read_token st);
  );

